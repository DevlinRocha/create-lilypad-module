#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")

# Main function
main() {
    local project_name="${1:-}"
    local target_dir templates_dir

    # Get project name if not provided
    if [[ -z $project_name ]]; then
        echo "🐸 Enter the name of your new project:"
        printf "(Default: lilypad-module) ➔ "
        read -r project_name
        project_name="${project_name:-lilypad-module}"
    fi

    target_dir="$(pwd)/${project_name}"
    templates_dir="${SCRIPT_DIR}/templates"

    # Validate target directory
    if [[ -d $target_dir ]]; then
        echo "❌ Error: Directory '$project_name' already exists." >&2
        exit 1
    fi

    # Validate templates directory
    if [[ ! -d $templates_dir ]]; then
        echo "❌ Error: Templates directory not found at $templates_dir" >&2
        exit 1
    fi

    # Create project directory
    echo -e "\nCreating a new Lilypad module in: $target_dir"
    mkdir -p "$target_dir"/

    # Copy templates with exclusions
    rsync -aq "${templates_dir}/" "${target_dir}/"

    # Initialize Git repository
    if ! git -C $target_dir init >/dev/null 2>&1; then
        echo "❌ Error: Failed to initialize Git repository" >&2
        exit 1
    fi

    chmod +x "$target_dir/help"
    chmod -R +x "$target_dir/scripts"

    # Success message
    echo -e "\n✅ Success! Created $project_name at ./$project_name"
    echo -e "\n📂 Get started by running:"
    echo -e "\n\tcd $project_name/"
    echo -e "\tscripts/configure"
    echo -e "\tscripts/build"
    echo -e "\tscripts/run"
    echo -e "\n🐸 GLHF!"
}

# Execute main function
main "$@"
